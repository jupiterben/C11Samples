cmake_minimum_required(VERSION 3.6)

project(cppSamples)

set(c11folder source/c11)

#SEE https://cmake.org/cmake/help/v3.6/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html#prop_gbl:CMAKE_CXX_KNOWN_FEATURES
#auto_type
add_executable(auto_type ${c11folder}/auto_type.cpp)
target_compile_features(auto_type PRIVATE cxx_auto_type)
#constexpr
add_executable(constexpr ${c11folder}/constexpr.cpp)
target_compile_features(constexpr PRIVATE cxx_constexpr)


#all feature
add_executable(allfeature ${c11folder}/allfeature.cpp)
#target_compile_features(allfeature PRIVATE cxx_aggregate_default_initializers)
target_compile_features(allfeature PRIVATE cxx_alias_templates)
target_compile_features(allfeature PRIVATE cxx_alignas)
target_compile_features(allfeature PRIVATE cxx_alignof)
target_compile_features(allfeature PRIVATE cxx_attributes)
target_compile_features(allfeature PRIVATE cxx_attribute_deprecated)
target_compile_features(allfeature PRIVATE cxx_auto_type)
target_compile_features(allfeature PRIVATE cxx_binary_literals)
target_compile_features(allfeature PRIVATE cxx_constexpr)
target_compile_features(allfeature PRIVATE cxx_contextual_conversions)
#target_compile_features(allfeature PRIVATE cxx_decltype_incomplete_return_types)
target_compile_features(allfeature PRIVATE cxx_decltype)
target_compile_features(allfeature PRIVATE cxx_decltype_auto)
target_compile_features(allfeature PRIVATE cxx_default_function_template_args)
target_compile_features(allfeature PRIVATE cxx_defaulted_functions)
target_compile_features(allfeature PRIVATE cxx_defaulted_move_initializers)
target_compile_features(allfeature PRIVATE cxx_delegating_constructors)
target_compile_features(allfeature PRIVATE cxx_deleted_functions)
target_compile_features(allfeature PRIVATE cxx_digit_separators)
target_compile_features(allfeature PRIVATE cxx_enum_forward_declarations)
target_compile_features(allfeature PRIVATE cxx_explicit_conversions)
target_compile_features(allfeature PRIVATE cxx_extended_friend_declarations)
target_compile_features(allfeature PRIVATE cxx_extern_templates)
target_compile_features(allfeature PRIVATE cxx_final)
target_compile_features(allfeature PRIVATE cxx_func_identifier)
target_compile_features(allfeature PRIVATE cxx_generalized_initializers)
target_compile_features(allfeature PRIVATE cxx_generic_lambdas)
target_compile_features(allfeature PRIVATE cxx_inheriting_constructors)
target_compile_features(allfeature PRIVATE cxx_inline_namespaces)
target_compile_features(allfeature PRIVATE cxx_lambdas)
target_compile_features(allfeature PRIVATE cxx_lambda_init_captures)
target_compile_features(allfeature PRIVATE cxx_local_type_template_args)
target_compile_features(allfeature PRIVATE cxx_long_long_type)
target_compile_features(allfeature PRIVATE cxx_noexcept)
target_compile_features(allfeature PRIVATE cxx_nonstatic_member_init)
target_compile_features(allfeature PRIVATE cxx_nullptr)
target_compile_features(allfeature PRIVATE cxx_override)
target_compile_features(allfeature PRIVATE cxx_range_for)
target_compile_features(allfeature PRIVATE cxx_raw_string_literals)
target_compile_features(allfeature PRIVATE cxx_reference_qualified_functions)
#target_compile_features(allfeature PRIVATE cxx_relaxed_constexpr)
target_compile_features(allfeature PRIVATE cxx_return_type_deduction)
target_compile_features(allfeature PRIVATE cxx_right_angle_brackets)
target_compile_features(allfeature PRIVATE cxx_rvalue_references)
target_compile_features(allfeature PRIVATE cxx_sizeof_member)
target_compile_features(allfeature PRIVATE cxx_static_assert)
target_compile_features(allfeature PRIVATE cxx_strong_enums)
#target_compile_features(allfeature PRIVATE cxx_thread_local)
target_compile_features(allfeature PRIVATE cxx_trailing_return_types)
target_compile_features(allfeature PRIVATE cxx_unicode_literals)
target_compile_features(allfeature PRIVATE cxx_uniform_initialization)
target_compile_features(allfeature PRIVATE cxx_unrestricted_unions)
target_compile_features(allfeature PRIVATE cxx_user_literals)
#target_compile_features(allfeature PRIVATE cxx_variable_templates)
target_compile_features(allfeature PRIVATE cxx_variadic_macros)
target_compile_features(allfeature PRIVATE cxx_variadic_templates)
target_compile_features(allfeature PRIVATE cxx_template_template_parameters)



#multi thread
add_executable(multithread  ${c11folder}/multithreading/mt.cpp)